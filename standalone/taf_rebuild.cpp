#include <iostream>
#include <set>

#include <TString.h>
#include <TFile.h>
#include <TTree.h>
#include <TH1F.h>
#include <Math/Vector3D.h>

#include "include/event/ta_event.h"
#include "include/event/particle_event.h"

using namespace ribll;


constexpr double taf_straight_strip_pars[12][16][2] = {
	// CsI 0
	{
		{278, -0.00170},
		{279, -0.00169},
		{265, -0.00177},
		{264, -0.00172},
		{253, -0.00178},
		{248, -0.00184},
		{280, -0.00169},
		{240, -0.00181},
		{223, -0.00192},
		{232, -0.00189},
		{244, -0.00182},
		{199, -0.00204},
		{216, -0.00197},
		{205, -0.00227},
		{365, -0.00187},
		{319, -0.00163}
	},
	// CsI 1
	{
		{258, -0.00160},
		{253, -0.00175},
		{254, -0.00172},
		{252, -0.00164},
		{249, -0.00164},
		{234, -0.00180},
		{251, -0.00170},
		{248, -0.00170},
		{222, -0.00183},
		{238, -0.00187},
		{225, -0.00190},
		{197, -0.00208},
		{203, -0.00207},
		{259, -0.00208},
		{316, -0.00160},
		{308, -0.00161}
	},
	// CsI 2
	{
		{223, -0.00157},
		{251, -0.00164},
		{290, -0.00148},
		{260, -0.00162},
		{257, -0.00152},
		{251, -0.00175},
		{266, -0.00157},
		{258, -0.00162},
		{228, -0.00181},
		{229, -0.00180},
		{230, -0.00180},
		{212, -0.00185},
		{212, -0.00191},
		{292, -0.00159},
		{292, -0.00159},
		{292, -0.00159}
	},
	// CsI 3
	{
		{248, -0.00142},
		{279, -0.00153},
		{298, -0.00138},
		{307, -0.00137},
		{207, -0.00147},
		{265, -0.00156},
		{285, -0.00138},
		{293, -0.00142},
		{267, -0.00156},
		{267, -0.00156},
		{230, -0.00180},
		{247, -0.00177},
		{227, -0.00186},
		{193, -0.00229},
		{179, -0.00201},
		{333, -0.00141}
	},
	// CsI 4
	{
		{330, -0.00136},
		{328, -0.00132},
		{314, -0.00146},
		{331, -0.00134},
		{327, -0.00139},
		{310, -0.00147},
		{307, -0.00149},
		{284, -0.00155},
		{305, -0.00150},
		{296, -0.00151},
		{274, -0.00171},
		{278, -0.00174},
		{286, -0.00166},
		{264, -0.00175},
		{393, -0.00132},
		{393, -0.00132}
	},
	// CsI 5
	{
		{323, -0.00145},
		{341, -0.00135},
		{324, -0.00140},
		{311, -0.00143},
		{311, -0.00138},
		{259, -0.00152},
		{268, -0.00155},
		{286, -0.00139},
		{297, -0.00140},
		{246, -0.00149},
		{246, -0.00148},
		{256, -0.00158},
		{257, -0.00185},
		{257, -0.00185},
		{351, -0.00136},
		{351, -0.00136}
	},
	// CsI 6
	{
		{325, -0.00149},
		{330, -0.00138},
		{327, -0.00148},
		{320, -0.00149},
		{313, -0.00150},
		{298, -0.00160},
		{290, -0.00155},
		{279, -0.00147},
		{274, -0.00160},
		{276, -0.00163},
		{274, -0.00160},
		{249, -0.00171},
		{253, -0.00165},
		{242, -0.00180},
		{376, -0.00139},
		{375, -0.00139}
	},
	// CsI 7
	{
		{307, -0.00146},
		{291, -0.00144},
		{285, -0.00161},
		{295, -0.00154},
		{291, -0.00159},
		{282, -0.00154},
		{278, -0.00154},
		{276, -0.00157},
		{265, -0.00169},
		{241, -0.00177},
		{237, -0.00186},
		{227, -0.00203},
		{233, -0.00165},
		{357, -0.00147},
		{357, -0.00147}
	},
	// CsI 8
	{
		{363, -0.00119},
		{352, -0.00120},
		{357, -0.00132},
		{350, -0.00130},
		{352, -0.00130},
		{339, -0.00129},
		{331, -0.00142},
		{317, -0.00148},
		{272, -0.00181},
		{304, -0.00154},
		{293, -0.00154},
		{304, -0.00163},
		{280, -0.00170},
		{277, -0.00171},
		{427, -0.00123},
		{427, -0.00123},
	},
	// CsI 9
	{
		{310, -0.00129},
		{293, -0.00122},
		{327, -0.00128},
		{344, -0.00127},
		{349, -0.00127},
		{319, -0.00126},
		{311, -0.00137},
		{306, -0.00139},
		{300, -0.00143},
		{290, -0.00143},
		{283, -0.00147},
		{253, -0.00166},
		{260, -0.00174},
		{186, -0.00210},
		{391, -0.00122},
		{391, -0.00122}
	},
	// CsI 10
	{
		{439, -0.00122},
		{439, -0.00122},
		{439, -0.00122},
		{439, -0.00122},
		{372, -0.00119},
		{369, -0.00124},
		{369, -0.00129},
		{345, -0.00140},
		{313, -0.00143},
		{313, -0.00150},
		{309, -0.00149},
		{273, -0.00163},
		{264, -0.00170},
		{232, -0.00174},
		{439, -0.00122},
		{439, -0.00122}
	},
	// CsI 11
	{
		{435, -0.00129},
		{435, -0.00129},
		{435, -0.00129},
		{435, -0.00129},
		{373, -0.00119},
		{362, -0.00136},
		{338, -0.00151},
		{330, -0.00155},
		{322, -0.00145},
		{321, -0.00151},
		{316, -0.00152},
		{301, -0.00153},
		{297, -0.00155},
		{256, -0.00181},
		{435, -0.00129},
		{435, -0.00129}
	}
};


constexpr double taf_strip_fit_h[12][16][2] = {
	// CsI 0
	{
		{54.0973, 2.35989},
		{54.3835, 2.19888},
		{54.7298, 2.30196},
		{54.9199, 2.35055},
		{55.1709, 2.42491},
		{55.8722, 2.35816},
		{57.5119, 2.54294},
		{56.8434, 2.44912},
		{56.7827, 2.31881},
		{57.9459, 2.3356},
		{59.0991, 2.54107},
		{57.8165, 2.46732},
		{59.1904, 2.64253},
		{58.1565, 3.71519},
		{60.4597, 7.76265},
		{45.6684, 9.29376},
	},
	// CsI 1
	{
		{53.3015, 2.30319},
		{52.9863, 2.02164},
		{53.9299, 2.155},
		{54.2631, 2.1822},
		{54.7402, 2.24835},
		{54.7169, 2.17472},
		{55.9363, 2.36186},
		{55.9083, 2.40853},
		{55.5922, 2.25481},
		{56.4889, 2.1851},
		{56.7554, 2.38447},
		{55.8123, 2.36024},
		{56.3525, 2.51702},
		{57.3504, 3.38801},
		{50.3662, 8.58034},
		{46.6618, 10},
	},
	// CsI 2
	{
		{52.8883, 2.33486},
		{54.4803, 2.1932},
		{56.8764, 2.4783},
		{56.7473, 2.5038},
		{51.3616, 3.42994},
		{56.9023, 2.43663},
		{58.64, 2.71905},
		{59.3564, 2.69906},
		{59.1054, 2.56928},
		{52.7328, 3.84608},
		{60.7321, 2.55206},
		{60.6454, 2.69479},
		{60.4452, 2.8998},
		{63.0914, 4.17112},
		{54.5135, 2.12143},
		{51.1266, 10},
	},
	// CsI 3
	{
		{54.7556, 2.37184},
		{56.3249, 2.22424},
		{58.7774, 2.47598},
		{60.0967, 2.59081},
		{53.1087, 3.24582},
		{59.8374, 2.43583},
		{61.5954, 2.67025},
		{62.2387, 2.57203},
		{61.7485, 2.45735},
		{54.9507, 3.65697},
		{61.7739, 2.44826},
		{62.5629, 2.79919},
		{62.0005, 2.84974},
		{60.4575, 3.36988},
		{52.7461, 9.99871},
		{52.6715, 9.80359},
	},
	// CsI 4
	{
		{60.6424, 2.29175},
		{61.3544, 2.34371},
		{61.2711, 2.32289},
		{62.3595, 2.73009},
		{62.8171, 2.62834},
		{63.1901, 2.63762},
		{64.1193, 2.54938},
		{64.1645, 2.58334},
		{65.6894, 2.64974},
		{65.8669, 2.72343},
		{65.3534, 2.82815},
		{66.4171, 2.95939},
		{65.729, 3.82514},
		{63.7908, 5.34541},
		{54.2103, 10},
		{47.8841, 9.99999},
	},
	// CsI 5
	{
		{59.0244, 2.39692},
		{60.4681, 2.54507},
		{60.962, 2.45494},
		{61.0116, 2.7661},
		{61.8345, 2.67074},
		{61.343, 2.67545},
		{62.6666, 2.73616},
		{64.3964, 2.73365},
		{65.6582, 2.67583},
		{64.5878, 2.69468},
		{65.0281, 2.72076},
		{65.9222, 2.84861},
		{62.4774, 3.67556},
		{61.5419, 3.73446},
		{54.2866, 8.30338},
		{61.852, 9.74038},		
	},
	// CsI 6
	{
		{60.1535, 2.48009},
		{60.8312, 4.0679},
		{62.1644, 2.4147},
		{62.8824, 2.38869},
		{63.0145, 2.48392},
		{63.6361, 2.48805},
		{63.6416, 2.51189},
		{62.9895, 2.52605},
		{63.6701, 2.5216},
		{65.0634, 2.48425},
		{65.3757, 2.51114},
		{65.0727, 2.47653},
		{65.8565, 2.52431},
		{64.5408, 3.9854},
		{49.3158, 10.0},
		{47.4121, 10.0},
	},
	// CsI 7
	{
		{59.4149, 2.3039},
		{59.2541, 3.80148},
		{59.9069, 2.2417},
		{60.9033, 2.29679},
		{60.7478, 2.36867},
		{61.8462, 2.38549},
		{61.5353, 2.40611},
		{60.433, 2.42749},
		{61.1824, 2.39704},
		{61.8486, 2.29393},
		{61.5353, 2.40611},
		{60.5603, 2.37572},
		{62.1753, 2.37484},
		{64.2914, 3.64087},
		{50.525, 8.99554},
		{54.4608, 10.0},
	},
	// CsI 8
	{
		{61.7666, 2.75421},
		{61.8588, 2.66032},
		{63.3633, 2.68561},
		{63.7558, 2.64264},
		{64.4277, 2.71519},
		{63.9033, 2.7298},
		{65.3234, 2.63548},
		{65.2321, 2.62881},
		{63.8037, 2.63656},
		{65.6198, 2.63858},
		{66.8158, 2.58006},
		{67.4838, 2.63971},
		{67.1998, 2.7038},
		{66.6209, 4.12738},
		{49.3039, 8.34736},
		{43.6364, 10},
	},
	// CsI 9
	{
		{57.4613, 2.64402},
		{58.1845, 2.5029},
		{60.3809, 2.44794},
		{60.9111, 2.56094},
		{61.5951, 2.77091},
		{60.9394, 2.67076},
		{62.501, 2.54413},
		{62.591, 2.58932},
		{63.3941, 2.49641},
		{63.3199, 2.56824},
		{64.5953, 2.58552},
		{63.9191, 2.40856},
		{63.4771, 2.52775},
		{60.0595, 3.78285},
		{44.7111, 9.05735},
		{59.4204, 10.0},
	},
	// CsI 10
	{
		{65, 3},
		{65, 3},
		{65, 3},
		{65, 3},
		{62.4986, 2.93402},
		{63.1715, 2.8057},
		{64.4234, 2.82301},
		{64.5739, 2.85215},
		{63.454, 2.80673},
		{64.6283, 2.7244},
		{65.1907, 2.71577},
		{64.5411, 3.3165},
		{64.0218, 2.81927},
		{64.1902, 4.138},
		{51.2206, 10},
		{65, 3},
	},
	// CsI 11
	{
		{65, 3},
		{65, 3},
		{65, 3},
		{65, 3},
		{64.6787, 2.89339},
		{64.7292, 2.78826},
		{65.2091, 2.81565},
		{65.9545, 2.78158},
		{65.838, 2.81168},
		{67.357, 2.80549},
		{68.1434, 2.74288},
		{68.8071, 3.48275},
		{68.5405, 2.84573},
		{67.6553, 2.77637},
		{61.5041, 10},
		{65, 3},
	}
};

constexpr double taf_strip_fit_d[12][16][2] = {
	// CsI 0
	{
		{70.9563, 2.91151},
		{71.5869, 2.61046},
		{71.6433, 2.86328},
		{72.1522, 2.91233},
		{72.409, 2.85624},
		{73.4555, 3.03226},
		{75.7065, 2.97385},
		{74.7924, 2.72869},
		{74.83, 2.72539},
		{76.2501, 2.56183},
		{77.5893, 2.65883},
		{76.156, 2.71645},
		{77.682, 2.96011},
		{76.0293, 3.23551},
		{81.8738, 1},		// bad
		{63.7151, 9.11853},	// bad
	},
	// CsI 1
	{
		{70.1927, 2.61913},
		{69.9992, 2.51606},
		{71.008, 2.52115},
		{71.804, 2.59668},
		{72.3324, 2.88918},
		{72.3028, 2.57013},
		{73.9351, 2.79208},
		{73.8755, 2.96614},
		{73.5435, 2.62488},
		{74.642, 2.41157},
		{74.9252, 2.79383},
		{73.7568, 2.94455},
		{74.3591, 2.59287},
		{75.4891, 3.07303},
		{71.1859, 9.99773},	// bad
		{73.1789, 10},		// bad
	},
	// CsI 2
	{
		{70.0229, 3.26877},
		{72.2865, 2.90135},
		{75.3183, 3.09839},
		{75.0111, 3.22725},
		{70.1663, 4.52677},
		{75.6148, 3.08326},
		{77.9126, 3.40648},
		{78.8249, 3.0249},
		{78.5111, 2.88591},
		{72.1873, 4.80619},
		{80.4705, 3.07033},
		{80.1554, 3.00339},
		{80.2595, 3.42284},
		{83.0955, 3.42624},	// bad
		{73.8772, 9.9998},	// bad
		{86.8104, 10},		// bad
	},
	// CsI 3
	{
		{72.821, 3.11485},
		{74.6757, 2.08471},
		{77.9893, 3.18651},
		{79.5343, 2.84952},
		{72.797, 4.55495},
		{79.8537, 3.22941},
		{81.8852, 3.15576},
		{82.7574, 2.95464},
		{82.1238, 3.04673},
		{75.4212, 4.53953},
		{81.72, 2.95845},
		{82.9792, 2.85219},
		{82.0828, 3.01708},
		{79.5779, 3.05013},
		{89.9999, 1},		// bad
		{68.8591, 9.84076},	// bad
	},
	// CsI 4
	{
		{80.278, 3.02623},
		{81.4021, 2.81276},
		{81.3156, 2.78278},
		{82.8441, 3.31716},
		{83.5145, 3.28173},
		{83.9544, 3.23711},
		{85.0607, 2.84483},
		{85.0486, 3.06979},
		{87.0133, 2.99593},
		{87.5536, 3.01965},
		{86.6726, 3.00914},
		{87.7781, 3.15065},
		{86.9635, 3.86769},
		{85.8217, 3.20234},
		{73.5797, 10},		// bad
		{89.3968, 1.93405},	// bad
	},
	// CsI 5
	{
		{77.7485, 3.28248},
		{80.2737, 3.13674},
		{80.7508, 3.01884},
		{80.932, 3.42156},
		{82.0975, 3.72343},
		{81.6138, 3.51401},
		{83.3395, 3.24172},
		{86.0342, 3.11961},
		{87.3417, 3.2062},
		{86.0449, 3.04998},
		{86.5602, 3.04414},
		{87.511, 2.89273},
		{83.3365, 3.99953},
		{82.0115, 4.02462},
		{64.2344, 9.73732},	// bad
		{80.7314, 10},		// bad
	},
	// CsI 6
	{
		{79.7099, 3.43727},
		{80.3111, 4.32788},
		{82.0424, 3.03992},
		{83.1203, 2.90103},
		{83.4035, 3.17767},
		{84.0336, 2.95874},
		{84.261, 2.91611},
		{83.7614, 2.94033},
		{84.3689, 2.88425},
		{85.8647, 2.72095},
		{86.5072, 2.78788},
		{86.2993, 2.77627},
		{87.315, 2.8253},
		{85.6197, 3.11107},
		{76.9014, 10},		// bad
		{86.981, 1.51767},	// bad
	},
	// CsI 7
	{
		{78.6776, 3.12589},
		{78.4785, 4.5388},
		{79.2403, 2.91489},
		{80.6575, 2.99326},
		{80.3583, 3.14053},
		{81.7984, 2.75277},
		{81.6708, 2.9812},
		{80.5219, 2.99007},
		{81.1745, 2.6778},
		{81.5756, 2.65063},
		{81.0937, 2.59421},
		{79.9447, 2.55721},
		{82.2385, 2.6701},
		{85.057, 3.54485},
		{79.5521, 1},		// bad
		{80.3022, 10},		// bad
	},
	// CsI 8
	{
		{81.5867, 3.82439},
		{81.9336, 3.59812},
		{83.5966, 3.48835},
		{84.1434, 3.41045},
		{84.9714, 3.21931},
		{84.8308, 3.30384},
		{86.0818, 3.0832},
		{85.9711, 2.93532},
		{84.0966, 2.76215},
		{86.8203, 2.88312},
		{88.28, 2.70538},
		{88.6277, 2.82232},
		{88.3752, 3.09797},
		{87.8112, 3.27379},
		{83.6053, 1},		// bad
		{76.4577, 10},		// bad
	},
	// CsI 9
	{
		{75.7813, 2.92513},
		{77.0914, 3.07556},
		{79.8701, 2.95605},
		{80.8612, 3.32668},
		{82.1127, 3.34133},
		{81.6932, 3.57405},
		{82.2699, 2.8817},
		{82.8297, 2.80227},
		{83.643, 2.97491},
		{84.0323, 2.69008},
		{84.8532, 2.72008},
		{83.6818, 2.98885},
		{83.9002, 2.70891},
		{79.6825, 2.03753},
		{68.7654, 9.99711},	// bad
		{90, 10},			// bad
	},
	// CsI 10
	{
		{85, 3},			// bad
		{85, 3},			// bad
		{85, 3},			// bad
		{85, 3},			// bad
		{83.2193, 3.61056},
		{83.8147, 3.64171},
		{84.6001, 3.30656},
		{84.8716, 3.29717},
		{83.6797, 3.29011},
		{84.6914, 2.97043},
		{85.611, 2.71875},
		{84.7213, 3.40686},
		{84.4221, 2.99822},
		{84.3533, 3.50011},
		{71.0885, 10},		// bad
		{85, 3},			// bad
	},
	// CsI 11
	{
		{85, 3},			// bad
		{85, 3},			// bad
		{85, 3},			// bad
		{85, 3},			// bad
		{85.5228, 3.41961},
		{85.5448, 3.44281},
		{85.7701, 3.60119},
		{86.6629, 3.30912},
		{86.9838, 3.1692},
		{88.4769, 3.03806},
		{89.443, 3.01299},
		{90.4083, 3.52338},
		{90.2928, 3.03731},
		{89.4199, 2.98574},
		{72.9787, 10},		// bad
		{85, 3},			// bad
	}
};
// bad strips
std::set<int> bad_strips[6];

void PrintUsage(const char *name) {
	std::cout << "Usage: " << name << " [options] run taf_index\n"
		"  run               Set run number.\n"
		"  taf_index         Set TAF index, 0-5.\n"
		"Options:\n"
		"  -h                Print this help information.\n"
		"  -t tag            Set trigger tag.\n";
}

/// @brief parse arguments
/// @param[in] argc number of arguments
/// @param[in] argv arguments
/// @param[out] help need help
/// @param[out] trigger_tag trigger tag get from arguments
/// @returns start index of positional arguments if succes, if failed returns
///		-argc (negative argc) for miss argument behind option,
/// 	or -index (negative index) for invalid arguemnt
///
int ParseArguments(
	int argc,
	char **argv,
	bool &help,
	std::string &trigger_tag
) {
	// initialize
	help = false;
	trigger_tag.clear();
	// start index of positional arugments
	int result = 0;
	for (result = 1; result < argc; ++result) {
		// assumed that all options have read
		if (argv[result][0] != '-') break;
		// short option contains only one letter
		if (argv[result][2] != 0) return -result;
		if (argv[result][1] == 'h') {
			help = true;
			return result;
		} else if (argv[result][1] == 't') {
			// option of trigger tag
			// get tag in next argument
			++result;
			// miss arguemnt behind option
			if (result == argc) return -argc;
			trigger_tag = argv[result];
		} else {
			return -result;
		}
	}
	return result;
}

/// @brief check whether the strip is bad
/// @param[in] index TAFD index 0-5
/// @param[in] strip strip index, start from 0
/// @returns true if it's bad, false for good
///
bool IsBadStrip(
	int index,
	int strip
) {
	auto search = bad_strips[index].find(strip);
	return search != bad_strips[index].end();
}

int main(int argc, char **argv) {
	if (argc < 2) {
		PrintUsage(argv[0]);
		return -1;
	}

	// help flag
	bool help = false;
	// trigger tag
	std::string tag;
	// parse arguments and get start index of positional arguments
	int pos_start = ParseArguments(argc, argv, help, tag);

	// need help
	if (help) {
		PrintUsage(argv[0]);
		return 0;
	}

	if (pos_start < 0) {
		if (-pos_start < argc) {
			std::cerr << "Error: Invaild option " << argv[-pos_start] << ".\n";
		} else {
			std::cerr << "Error: Option need parameter.\n";
		}
		PrintUsage(argv[0]);
		return -1;
	}

	if (pos_start + 1 >= argc) {
		// positional arguments less than 3
		std::cerr << "Error: Miss taf_index argument.\n";
		PrintUsage(argv[0]);
		return -1;
	}

	// run number
	int run = atoi(argv[pos_start]);
	// taf index
	int taf_index = atoi(argv[pos_start+1]);

	// input file name
	TString input_file_name = TString::Format(
		"%s%staf%d-telescope-%s%04d.root",
		kGenerateDataPath,
		kTelescopeDir,
		taf_index,
		tag.empty() ? "" : (tag+"-").c_str(),
		run
	);
	// input file
	TFile ipf(input_file_name, "read");
	// input tree
	TTree *ipt = (TTree*)ipf.Get("tree");
	if (!ipt) {
		std::cerr << "Error: Get tree from "
			<< input_file_name << " failed.\n";
		return -1;
	}
	// input event
	TaEvent taf_event;
	// setup input branches
	taf_event.SetupInput(ipt);

	// output file name
	TString output_file_name = TString::Format(
		"%s%staf%d-particle-%sv2-%04d.root",
		kGenerateDataPath,
		kParticleDir,
		taf_index,
		tag.empty() ? "" : (tag+"-").c_str(),
		run
	);
	// output file
	TFile opf(output_file_name, "recreate");
	// histogram of d-sigma
	TH1F hist_d_sigma("hds", "d sigma in straight PID", 1000, -10, 10);
	// output tree
	TTree opt("tree", "rebuilt taf deutron particle");
	// output event
	ParticleEvent particle;
	// setup output branches
	particle.SetupOutput(&opt);

	// initialize bad strips
	bad_strips[1].insert(0);
	bad_strips[1].insert(4);
	bad_strips[1].insert(9);
	bad_strips[1].insert(13);
	bad_strips[2].insert(12);
	bad_strips[3].insert(1);
	bad_strips[5].insert(11);

	// loop
	for (long long entry = 0; entry < ipt->GetEntriesFast(); ++entry) {
		// get data
		ipt->GetEntry(entry);

		// initialize
		particle.num = 0;
		particle.px[0] = 0.0;
		particle.py[0] = 0.0;
		particle.pz[0] = 0.0;
		particle.status[0] = 0;

		// check number
		if (taf_event.num != 1) {
			opt.Fill();
			continue;
		}
		// // check flag
		// if (taf_event.flag[0] != 0x3 && taf_event.flag[0] != 0x5) {
		// 	opt.Fill();
		// 	continue;
		// }
		// check strips
		if (taf_index == 5 && taf_event.front_strip[0] <= 3) {
			opt.Fill();
			continue;
		}
		// check bad strips
		if (IsBadStrip(taf_index, taf_event.front_strip[0])) {
			opt.Fill();
			continue;
		}

		int csi_index = taf_event.flag[0] == 0x3 ? 0 : 1;
		int fs = taf_event.front_strip[0];
		double de = taf_event.energy[0][0];
		double e = taf_event.energy[0][1];
		double a = taf_straight_strip_pars[taf_index*2+csi_index][fs][0];
		double b = taf_straight_strip_pars[taf_index*2+csi_index][fs][1];
		double ef = sqrt(de*e + a*de*de) + b*e;
		double mean_h = taf_strip_fit_h[taf_index*2+csi_index][fs][0];
		double sigma_h = taf_strip_fit_h[taf_index*2+csi_index][fs][1];
		double mean_d = taf_strip_fit_d[taf_index*2+csi_index][fs][0];
		double sigma_d = taf_strip_fit_d[taf_index*2+csi_index][fs][1];

		int mass = -1;
		if (taf_event.flag[0] != 0x1 && fs <= 13) {
			if (fabs((ef - mean_h) / sigma_h) < 2.0) mass = 1;
			else if (fabs((ef - mean_d) / sigma_d) < 2.0) mass = 2;
		} else {
			if (fs >= 12) mass = 0;
		}

		if (mass == 1 || mass == 2) {
			particle.num = 1;
			// charge and mass
			particle.mass[0] = mass;
			particle.charge[0] = 1;
			// energy
			double a0 = power_csi_param[taf_index*2+csi_index][0];
			double a1 = power_csi_param[taf_index*2+csi_index][1];
			double a2 = power_csi_param[taf_index*2+csi_index][2];
			double csi_energy = pow((e - a2 ) / a0, 1.0 / a1);
			particle.energy[0] = de + csi_energy;
			// time
			particle.time[0] = taf_event.time[0][0];
			// position
			ROOT::Math::Polar3DVector position(
				taf_event.radius[0], taf_event.theta[0], taf_event.phi[0]
			);
			particle.x[0] = position.X();
			particle.y[0] = position.Y();
			particle.z[0] = position.Z();
			// index
			particle.index[0] = csi_index;
		} else if (mass == 0) {
			particle.num = 1;
			// charge and mass
			particle.mass[0] = mass;
			particle.charge[0] = 1;
			// energy
			particle.energy[0] = de;
			// time
			particle.time[0] = taf_event.time[0][0];
			// position
			ROOT::Math::Polar3DVector position(
				taf_event.radius[0], taf_event.theta[0], taf_event.phi[0]
			);
			particle.x[0] = position.X();
			particle.y[0] = position.Y();
			particle.z[0] = position.Z();
			// index
			particle.index[0] = csi_index;
		}

		opt.Fill();

		hist_d_sigma.Fill((ef-mean_d)/sigma_d);
	}

	// save tree
	opf.cd();
	hist_d_sigma.Write();
	opt.Write();
	// close files
	opf.Close();
	ipf.Close();

	return 0;
}